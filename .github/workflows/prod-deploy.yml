name: Production Deployment

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  IMAGE_NAME: mehrdadhub-api

jobs:
  change-check:
    runs-on: ubuntu-latest
    outputs:
      hasChangeset: ${{ steps.check-md-files.outputs.hasChangeset }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Check for existing changesets
        id: check-md-files
        run: |
          md_files=$(find .changeset -name '*.md' ! -name 'README.md')
          if [ -z "$md_files" ]; then
            echo "No changeset files found."
            echo "hasChangeset=no" >> "$GITHUB_OUTPUT"
          else
            echo "Found changeset files:"
            echo "$md_files"
            echo "hasChangeset=yes" >> "$GITHUB_OUTPUT"
          fi
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: change-check
    if: needs.change-check.outputs.hasChangeset == 'yes'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install changeset
        run: npm ci --include "dev"

      - name: Create and publish a changeset
        id: changeset
        run: |
          npx changeset version
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "auto(hotfix): Version bumped by GitHub action"
          git tag -a v$(npm pkg get version --workspaces=false | tr -d '"') -m "Hotfix Release v${{ env.VERSION }}"
          git push origin ${{ github.ref }} --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(npm pkg get version --workspaces=false | tr -d '\"')" >> $GITHUB_ENV
        
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} .

      - name: Log in to Docker Repository
        run: echo ${{ secrets.DOCKER_REPO_ACCESS_TOKEN }} | docker login ${{ vars.DOCKER_REPO_HOST }} -u ${{ secrets.DOCKER_REPO_USERNAME }} --password-stdin

      - name: Tag Docker image
        run: docker tag ${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ vars.DOCKER_REPO_HOST }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Push Docker image to registry
        run: docker push ${{ vars.DOCKER_REPO_HOST }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Staging
        env:
          HOSTNAME: ${{secrets.SERVER_SSH_HOST}}
          USER_NAME: ${{secrets.SERVER_USER_NAME}}
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${USER_NAME}@${HOSTNAME} 'cd app/prod/api && BACKEND_VERSION=${{ env.VERSION }} docker compose pull && BACKEND_VERSION=${{ env.VERSION }} docker compose up -d'

      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ env.VERSION }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: MehrdadHub API Release v${{ env.VERSION }}
          body_path : CHANGELOG.md
          draft: false
          prerelease: false
          
      - name: Merge release to develop
        uses: devmasx/merge-branch@master
        with:
          type: now
          target_branch: develop
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: ${{ github.ref_name }} branch merged with develop for syncing latest changes.
        
  
  just-deploy:
    runs-on: ubuntu-latest
    needs: [change-check]
    if: needs.change-check.outputs.hasChangeset == 'no'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Log in to Docker Repository
        run: echo ${{ secrets.DOCKER_REPO_ACCESS_TOKEN }} | docker login ${{ vars.DOCKER_REPO_HOST }} -u ${{ secrets.DOCKER_REPO_USERNAME }} --password-stdin

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(npm pkg get version --workspaces=false | tr -d '\"')" >> $GITHUB_ENV

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Deploy to Production
        env:
          HOSTNAME: ${{secrets.SERVER_SSH_HOST}}
          USER_NAME: ${{secrets.SERVER_USER_NAME}}
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${USER_NAME}@${HOSTNAME} 'cd app/prod/api && BACKEND_VERSION=${{ env.VERSION }}-rc docker compose pull && BACKEND_VERSION=${{ env.VERSION }}-rc docker compose up -d'

      - uses: iarekylew00t/crane-installer@v1
      - name: Tag Remote Image for Prod release
        run: crane tag ${{ vars.DOCKER_REPO_HOST }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-rc ${{ env.VERSION }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: MehrdadHub API Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          body_path : CHANGELOG.md
